// This file was generated by counterfeiter
package sshfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/groundcrew/ssh"
)

type FakeRunner struct {
	RetireWorkerStub        func(logger lager.Logger) error
	retireWorkerMutex       sync.RWMutex
	retireWorkerArgsForCall []struct {
		logger lager.Logger
	}
	retireWorkerReturns struct {
		result1 error
	}
	LandWorkerStub        func(logger lager.Logger) error
	landWorkerMutex       sync.RWMutex
	landWorkerArgsForCall []struct {
		logger lager.Logger
	}
	landWorkerReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRunner) RetireWorker(logger lager.Logger) error {
	fake.retireWorkerMutex.Lock()
	fake.retireWorkerArgsForCall = append(fake.retireWorkerArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("RetireWorker", []interface{}{logger})
	fake.retireWorkerMutex.Unlock()
	if fake.RetireWorkerStub != nil {
		return fake.RetireWorkerStub(logger)
	} else {
		return fake.retireWorkerReturns.result1
	}
}

func (fake *FakeRunner) RetireWorkerCallCount() int {
	fake.retireWorkerMutex.RLock()
	defer fake.retireWorkerMutex.RUnlock()
	return len(fake.retireWorkerArgsForCall)
}

func (fake *FakeRunner) RetireWorkerArgsForCall(i int) lager.Logger {
	fake.retireWorkerMutex.RLock()
	defer fake.retireWorkerMutex.RUnlock()
	return fake.retireWorkerArgsForCall[i].logger
}

func (fake *FakeRunner) RetireWorkerReturns(result1 error) {
	fake.RetireWorkerStub = nil
	fake.retireWorkerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRunner) LandWorker(logger lager.Logger) error {
	fake.landWorkerMutex.Lock()
	fake.landWorkerArgsForCall = append(fake.landWorkerArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("LandWorker", []interface{}{logger})
	fake.landWorkerMutex.Unlock()
	if fake.LandWorkerStub != nil {
		return fake.LandWorkerStub(logger)
	} else {
		return fake.landWorkerReturns.result1
	}
}

func (fake *FakeRunner) LandWorkerCallCount() int {
	fake.landWorkerMutex.RLock()
	defer fake.landWorkerMutex.RUnlock()
	return len(fake.landWorkerArgsForCall)
}

func (fake *FakeRunner) LandWorkerArgsForCall(i int) lager.Logger {
	fake.landWorkerMutex.RLock()
	defer fake.landWorkerMutex.RUnlock()
	return fake.landWorkerArgsForCall[i].logger
}

func (fake *FakeRunner) LandWorkerReturns(result1 error) {
	fake.LandWorkerStub = nil
	fake.landWorkerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.retireWorkerMutex.RLock()
	defer fake.retireWorkerMutex.RUnlock()
	fake.landWorkerMutex.RLock()
	defer fake.landWorkerMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ssh.Runner = new(FakeRunner)
